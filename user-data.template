#cloud-config

# ========================================================================
# RASPBERRY PI CLOUD SERVER - USER-DATA TEMPLATE
# ========================================================================
#
# This is a TEMPLATE file for cloud-init configuration.
# DO NOT edit this file directly - it contains variable placeholders.
#
# USAGE:
# 1. Copy secrets.env.example to secrets.env
# 2. Edit secrets.env with your actual configuration
# 3. Make script executable: chmod +x generate-userdata.sh
# 4. Run ./generate-userdata.sh to generate the final user-data file
# 5. Copy user-data to /media/$USER/system-boot/user-data
#
# More information: https://cloudinit.readthedocs.io/
# ========================================================================

# vim: syntax=yaml
#
# Download the latest Ubuntu Server image for RaspberryPi from https://ubuntu.com/download/raspberry-pi.
# Flash the SD-Card and copy this file to the system-boot partition before
# boot the RaspberryPi:
#
# $ unxz ubuntu-25.10-preinstalled-server-arm64+raspi.img.xz
# $ pv ubuntu-25.10-preinstalled-server-arm64+raspi.img.img \
# | sudo dd iflag=fullblock of=/dev/mmcblk0 bs=64M oflag=direct5-10-01-raspios-trixie-arm64-lite.img -B 16m \
# | sudo dd iflag=fullblock of=/dev/sda bs=64M oflag=direct && sync
# $ cp user-data.yaml /media/$USER/system-boot/user-data
#
# Alternatively install Ubuntu Server via "$ sudo apt install rpi-imager", see
# https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#1-overview

# set hostname and update hosts-file entries
hostname: ${HOSTNAME}

# Set up the keyboard layout. See localectl(1), in particular the various
# list-x11-* sub-commands, to determine the available models, layouts,
# variants, and options
keyboard:
  layout: de

# Allow SSH password authentication
ssh_pwauth: true

# modify user information
users:
- name: pirate
  groups: users,docker,video
  shell: /bin/bash
  lock_passwd: false
  #ssh_authorized_keys:
  #- ssh-ed25519 AAAAC..
  ssh_import_id:
  - gh:${GITHUB_USER}
  sudo: ALL=(ALL) NOPASSWD:ALL
- name: ${USER1}
  gecos: ${USER1}
  lock_passwd: true
  no_create_home: true
  shell: /usr/sbin/nologin
- name: ${USER2}
  gecos: ${USER2}
  lock_passwd: true
  no_create_home: true
  shell: /usr/sbin/nologin

chpasswd:
  expire: true
  users:
  - {name: pirate, password: hypriot, type: text}

apt:
  sources:
    docker.list:
      source: "deb [arch=arm64] https://download.docker.com/linux/ubuntu $RELEASE stable"
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

package_update: true
package_upgrade: true
package_reboot_if_required: true
packages:
- avahi-daemon
- byobu
- ca-certificates
- curl
- docker-ce
- docker-ce-cli
- containerd.io
- docker-buildx-plugin
- docker-compose-plugin
- mc
- mdadm
- samba
- samba-common-bin
- tmux
- vim

timezone: "Europe/Berlin"

#device_aliases:
#   <alias name>: <device path>
disk_setup:
    /dev/sda:
        table_type: gpt
        layout: true
        overwrite: true
        #overwrite: false
    /dev/sdb:
        table_type: gpt
        layout: true
        overwrite: true
        #overwrite: false
fs_setup:
    - label: ssd1
      filesystem: ext4
      device: /dev/sda
      partition: auto
      overwrite: true
      #overwrite: false
    - label: ssd2
      filesystem: ext4
      device: /dev/sdb
      partition: auto
      overwrite: true
      #overwrite: false

write_files:
  # configure console font
  #- path: /etc/default/console-setup
  #  content: |
  #    # Consult the console-setup(5) manual page.
  #    ACTIVE_CONSOLES="/dev/tty[1-6]"
  #    CHARMAP="UTF-8"
  #    VIDEOMODE=
  #    FONT="Lat15-Terminus18x10.psf.gz"
  #    FONTFACE=
  #    FONTSIZE=
  #    CODESET="Lat15"
  #  permissions: '0644'
  #  owner: root:root

  # configure static network interface
  - content: |
      # see configuration options via 'man dhcpcd.conf'
      hostname
      persistent
      slaac private

      interface eth0
      static ip_address=${STATIC_IP}
      # static ip6_address=fd51:42f8:caae:d92e::ff/64
      static routers=${GATEWAY_IP}
      static domain_name_servers=${DNS_SERVERS}
    path: /etc/dhcpcd.conf

  # configure midnight commander with lynx-like motion (system-wide)
  - path: /etc/skel/.config/mc/ini
    content: |
      [Midnight-Commander]
      use_internal_edit=true

      [Panels]
      navigate_with_arrows=true
    owner: root:root
    permissions: '0644'

  # configure SAMBA shares
  - content: |
      [${USER1}]
      path=/mnt/raid1/${USER1}
      create mask=0700
      directory mask=0700
      valid users = ${USER1}
      write list = ${USER1}
      map read only = no

      [${USER2}]
      path=/mnt/raid1/${USER2}
      create mask=0700
      directory mask=0700
      valid users = ${USER2},${USER1}
      write list = ${USER2},${USER1}
      map read only = no

      [shared]
      path=/mnt/raid1/shared
      writeable=Yes
      create mask=0777
      directory mask=0777
      public=no

      [public]
      path=/mnt/raid1/public
      browseable = yes
      writable = yes
      public = yes
      guest ok = yes
      map read only = no
    path: /etc/samba/smb.conf

  # configure Unifi Controller docker-compose
  - content: |
      services:
        unifi:
          image: ryansch/unifi-rpi:latest
          container_name: unifi
          restart: unless-stopped
          environment:
            JAVA_OPTS: -Xmx1024M
          network_mode: host
          volumes:
            # Unifi v5.0.7 creates all of these directories (some remain empty)
            - config:/var/lib/unifi
            - log:/usr/lib/unifi/logs
            - log2:/var/log/unifi
            - run:/usr/lib/unifi/run
            - run2:/run/unifi
            - work:/usr/lib/unifi/work

      volumes:
        config:
        log:
        log2:
        run:
        run2:
        work:
    path: /opt/unifi/compose.yml
    owner: root:root
    permissions: '0644'

  # configure Unifi systemd service
  - content: |
      [Unit]
      Description=Unifi Controller
      After=docker.service
      BindsTo=docker.service

      [Service]
      TimeoutStartSec=0
      TimeoutStopSec=30
      Restart=always
      RestartSec=10

      WorkingDirectory=/opt/unifi

      ExecStartPre=-/usr/bin/docker compose kill
      ExecStartPre=-/usr/bin/docker compose rm -f

      ExecStart=/usr/bin/docker compose up --force-recreate

      ExecStop=/usr/bin/docker compose stop

      [Install]
      WantedBy=multi-user.target
    path: /opt/unifi/unifi.service
    owner: root:root
    permissions: '0644'


# these commands will run once on first boot only
runcmd:
  # pickup hostname-, network-changes
  - systemctl restart avahi-daemon
  - systemctl restart docker

  # configure MOTD - disable unwanted default scripts
  - chmod -x /etc/update-motd.d/10-help-text
  - chmod -x /etc/update-motd.d/50-motd-news 2>/dev/null || true
  - |
    cat > /etc/update-motd.d/99-system-status << 'MOTD_EOF'
    #!/bin/bash
    echo " ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─"
    echo ""

    # Get uptime
    uptime_info=$(uptime -p | sed 's/up //')

    # Get RAID space
    raid_space=$(df -h /mnt/raid1 2>/dev/null | awk 'NR==2 {printf "%s / %s", $3, $2}')

    # Get container count and status
    docker_status=$(systemctl is-active docker 2>/dev/null || echo "inactive")
    container_count=$(docker ps -q 2>/dev/null | wc -l)

    # Get Samba count and shares (exclude default sections like [homes], [printers])
    share_count=$(grep -c '^\[' /etc/samba/smb.conf 2>/dev/null || echo "0")
    share_names=$(grep '^\[' /etc/samba/smb.conf | sed 's/^\[//;s/\]$//' | grep -Ev '^(global|homes|printers)$' | tr '\n' ', ' | sed 's/,$//')

    # Line 1: Hostname and Uptime
    printf "  %-28s  %s\n" "Hostname: $(hostname)" "Uptime: $uptime_info"

    # Line 2: RAID status
    if grep -q '\[UU\]' /proc/mdstat 2>/dev/null; then
        raid_status="Healthy [UU]"
        if mountpoint -q /mnt/raid1 2>/dev/null; then
            printf "  %-28s  %s\n" "RAID: $raid_status" "Storage: $raid_space"
        else
            printf "  %-28s\n" "RAID: $raid_status"
        fi
    elif grep -q 'resync\|recovery' /proc/mdstat 2>/dev/null; then
        printf "  %-28s\n" "RAID: SYNCING"
    else
        printf "  %-28s\n" "RAID: Check /proc/mdstat"
    fi

    # Line 3: Docker status and running containers
    if [ "$container_count" -gt 0 ]; then
        containers=$(docker ps --format "{{.Names}}" | tr '\n' ', ' | sed 's/,$//')
        printf "  %-28s  %s\n" "Docker: $docker_status ($container_count running)" "→ $containers"
    else
        printf "  %-28s\n" "Docker: $docker_status ($container_count running)"
    fi

    # Line 4: Samba status
    samba_status=$(systemctl is-active smbd 2>/dev/null || echo "inactive")
    if [ "$samba_status" = "active" ]; then
        if [ -n "$share_names" ]; then
            printf "  %-28s  %s\n" "Samba: $samba_status ($share_count shares)" "→ $share_names"
        else
            printf "  %-28s\n" "Samba: $samba_status"
        fi
    else
        printf "  %-28s\n" "Samba: $samba_status"
    fi

    echo ""
    MOTD_EOF
  - chmod +x /etc/update-motd.d/99-system-status

  # Note: Stop and zero any existing RAID metadata to prevent auto-assembly as md127.
  # These commands work for all scenarios (fresh disks, existing arrays, or mixed states)
  # due to error suppression (2>/dev/null || true) - they fail gracefully if not needed.
  - mdadm --stop /dev/md127 2>/dev/null || true
  - mdadm --zero-superblock /dev/sda1 /dev/sdb1 2>/dev/null || true
  # Create RAID1 storage '/dev/md0' from two USB drives, mount to '/mnt/raid1'
  # and create share directories
  - mdadm --create --run --verbose /dev/md0 --level=1 --raid-devices=2 /dev/sda1 /dev/sdb1
  - mkfs.ext4 -F /dev/md0
  - mkdir -p /mnt/raid1
  - mount /dev/md0 /mnt/raid1
  - echo '/dev/md0 /mnt/raid1 ext4 defaults,nofail,noatime 0 1' >> /etc/fstab
  - mdadm --detail --scan | tee -a /etc/mdadm/mdadm.conf
  - update-initramfs -u
  - mkdir -p /mnt/raid1/${USER1}
  - mkdir -p /mnt/raid1/${USER2}
  - mkdir -p /mnt/raid1/shared
  - mkdir -p /mnt/raid1/public
  - chown -R ${USER1}:sambashare /mnt/raid1/${USER1}
  - chown -R ${USER2}:sambashare /mnt/raid1/${USER2}
  - chown -R pirate:sambashare /mnt/raid1/shared
  - chmod -R 2770 /mnt/raid1/${USER1}
  - chmod -R 2770 /mnt/raid1/${USER2}
  - chmod -R 2770 /mnt/raid1/shared
  - chmod -R 2775 /mnt/raid1/public

  # Add users to sambashare group and set Samba passwords
  - usermod -a -G sambashare ${USER1}
  - usermod -a -G sambashare ${USER2}
  - (echo ${USER1_SAMBA_PASSWORD}; echo ${USER1_SAMBA_PASSWORD}) | smbpasswd -a ${USER1} -s
  - (echo ${USER2_SAMBA_PASSWORD}; echo ${USER2_SAMBA_PASSWORD}) | smbpasswd -a ${USER2} -s

  # set up dynamic DNS updater (wait for Docker to be ready)
  #- timeout 60 sh -c 'until docker info >/dev/null 2>&1; do sleep 1; done'
  - docker run --name ddclient \
               --env HOSTNAME=${DDNS_HOSTNAME} \
               --env UPDATE_TOKEN=${DDNS_TOKEN} \
               --restart unless-stopped \
               --detach netzfisch/rpi-dyndns

  # set up Unifi controller
  - mkdir -p /opt/unifi
  - systemctl enable --now /opt/unifi/unifi.service

  # set up VPN server
  #- docker run --name vpnserver \
  #             --cap-add NET_ADMIN \
  #             --publish 500:500/udp \
  #             --publish 4500:4500/udp \
  #             --volume /mnt/raid1/shared/configs/vpn:/mnt \
  #             --restart unless-stopped \
  #             --detach netzfisch/rpi-vpn-server

final_message: "The system is finally up, after $UPTIME seconds"

# To DEBUG log into the instance, check '/var/log/cloud-init-output.log', and
# run single commands to verify, e.g.:
#
# $ sudo cloud-init single --name users_groups --frequency always
#
# Edit '/boot/firmware/user-data', BUT ATTENTION - be aware setting "fs_setup: overwrite: true'
# will overwrite raid-partitions on next boot and data will be lost!
# To avoid this, set "fs_setup: overwrite: false' for existing partitions.
#
# BEFORE REBOOT, clean up:
#
# $ watch cat /proc/mdstat                                                               # wait until sync finished
# $ echo none | sudo tee /sys/block/md1/md/sync_action                                   # stop sync if necessary
# $ sudo rm -R /etc/dhcpcd.conf /etc/mdadm/mdadm.conf /etc/samba/smb.conf /mnt/raid1/* \
#   /opt/unifi/compose.yml /opt/unifi/unifi.service                                      # remove auto-generated files
# $ docker stop ddclient unifi vpnserver && docker rm ddclient unifi vpnserver           # stop and remove running containers
# $ sudo cloud-init clean --logs --reboot
#
# Then the instance will reboot and re-run cloud-init with the updated 'user-data' file, in detail:
# - Deletes old cloud-init state in /var/lib/cloud/
# - Keeps your new /boot/firmware/user-data
# - Immediately reboots
# - On next boot, cloud-init treats it as a fresh install and applies the new configuration
